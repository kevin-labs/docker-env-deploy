server {
    listen 80;
    listen [::]:80;

    server_name default_server_ssl;

    # 关闭服务器签名
    server_tokens off;

    # 证书验证
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # SSL跳转
    location / {
        return 301 https://default_server_ssl$request_uri;
    }
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name default_server_ssl;
    root /var/www/html/default_server_ssl/public;
    index index.php index.html;
    client_max_body_size 10240M;
    server_tokens off;

    # SSL证书
    ssl_certificate /etc/nginx/ssl/live/default_server_ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/default_server_ssl/privkey.pem;    

    # Gzip压缩
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # 反向代理
    location / {
        proxy_pass http://172.17.0.1:9000;
        # 告诉Nginx使用HTTP/1.1协议。
        proxy_http_version 1.1;
        # 告诉 Nginx 不要缓存 WebSocket 连接。
        proxy_cache_bypass  $http_upgrade;
        
        # 配置WebSocket请求头部，使其能够升级到WebSocket协议。
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        # 设置代理服务器的Host头为客户端请求的Host头。
        proxy_set_header Host $host;
        # 设置代理服务器的X-Real-IP头为客户端真实IP地址。
        proxy_set_header X-Real-IP $remote_addr;
        # 设置代理服务器的X-Forwarded-For头，包含了客户端请求的远程地址和中间代理服务器的地址。
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # 将客户端请求方案（http 或 https）传递给后端服务器。
        proxy_set_header X-Forwarded-Proto $scheme;
        # 将客户端请求的域名传递给后端服务器。
        proxy_set_header X-Forwarded-Host  $host;
        # 将客户端请求的端口号传递给后端服务器。
        proxy_set_header X-Forwarded-Port  $server_port;
    }
}